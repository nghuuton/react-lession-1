{"version":3,"sources":["components/counter.jsx","components/counters.jsx","components/navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Counter","value","this","props","counter","console","log","deleteCounter","increment","removeValue","className","classNames","formatCount","onClick","id","Component","Counters","counters","onIncreament","onDelete","onRemoveValue","onReset","map","key","NavBar","totalCounters","href","App","state","handleDelete","bind","reset","counterId","filter","c","setState","index","indexOf","newData","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.acd32448.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport classNames from \"classnames\";\r\nclass Counter extends Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   this.state = {\r\n  //     value: this.props.counter.value,\r\n  //     // tags: [\"tag1\", \"tag2\", \"tag3\"],\r\n  //   };\r\n  // }\r\n\r\n  formatCount() {\r\n    const value = this.props.counter.value;\r\n    return value === 0 ? \"Zero\" : value;\r\n  }\r\n\r\n  // increment() {\r\n  //   return () => {\r\n  //     this.setState({\r\n  //       value: this.props.counter.value + 1,\r\n  //     });\r\n  //   };\r\n  // }\r\n  // removeValue() {\r\n  //   return () => {\r\n  //     this.setState({\r\n  //       value: 0,\r\n  //     });\r\n  //   };\r\n  // }\r\n  // ListenEventDelete(id) {\r\n  //   return () => {\r\n  //     this.props.deleteCounter(id);\r\n  //   };\r\n  // }\r\n\r\n  render() {\r\n    console.log(\"Counter Render\");\r\n    // const { value /*tags*/ } = this.props.counter.value;\r\n    // const { children } = this.props;\r\n    const { deleteCounter, counter, increment, removeValue } = this.props;\r\n    return (\r\n      <div className=\"counter\">\r\n        {/* {children} */}\r\n        <span\r\n          className={classNames(\"badge mr-2 \", {\r\n            \"badge-primary\": counter.value > 0,\r\n            \"badge-warning\": counter.value === 0,\r\n          })}\r\n        >\r\n          {this.formatCount()}\r\n        </span>\r\n        <button\r\n          className=\"btn btn-secondary primary btn-sm\"\r\n          onClick={() => increment(counter, 1)}\r\n        >\r\n          Increment\r\n        </button>\r\n        <button\r\n          onClick={() => deleteCounter(counter.id)}\r\n          className=\"btn btn-danger btn-sm m-1\"\r\n        >\r\n          Delete\r\n        </button>\r\n        <button\r\n          onClick={() => removeValue(counter)}\r\n          className=\"btn btn-danger btn-sm m-1\"\r\n        >\r\n          Remove Value\r\n        </button>\r\n        {/* <ul>\r\n          {tags.length > 0 &&\r\n            tags.map((item, index) => <li key={index}>{item}</li>)}\r\n          {tags.length === 0 && <li>Nothing in here!</li>}\r\n        </ul> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  render() {\r\n    console.log(\"Counters Render\");\r\n    const {\r\n      counters,\r\n      onIncreament,\r\n      onDelete,\r\n      onRemoveValue,\r\n      onReset,\r\n    } = this.props;\r\n    return (\r\n      <div>\r\n        <button onClick={onReset} className=\"btn btn-primary btn-sm mb-1\">\r\n          Reset\r\n        </button>\r\n        {counters.map((counter) => (\r\n          <Counter\r\n            increment={onIncreament}\r\n            deleteCounter={onDelete}\r\n            removeValue={onRemoveValue}\r\n            counter={counter}\r\n            key={counter.id}\r\n          >\r\n            {/* <h1>Counter #{counters.id}</h1> */}\r\n          </Counter>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React from \"react\";\r\n\r\n// Stateless function component\r\nconst NavBar = ({ totalCounters }) => {\r\n  console.log(\"NavBar Render\");\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <a href=\"/\" className=\"navbar-brand\">\r\n        Navbar{\" \"}\r\n        <span className=\"badge badge-pill badge-secondary\">\r\n          {totalCounters}\r\n        </span>\r\n      </a>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\n// import \"./App.css\";\n// import { getMovies } from \"./services/fakeMovieService\";\n// import Counter from './components/counter'\nimport Counters from \"./components/counters\";\nimport NavBar from \"./components/navbar\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counters: [\n        { id: 1, value: 4 },\n        { id: 2, value: 0 },\n        { id: 3, value: 0 },\n        { id: 4, value: 0 },\n      ],\n    };\n    console.log(\"App - Constructor\");\n    this.handleDelete = this.handleDelete.bind(this);\n    this.increment = this.increment.bind(this);\n    this.removeValue = this.removeValue.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n  componentDidMount() {\n    console.log(\"App - Mount\");\n  }\n  handleDelete(counterId) {\n    const counters = this.state.counters.filter((c) => c.id !== counterId);\n    this.setState({ counters });\n  }\n\n  increment(counter, value) {\n    // C1\n    // const { counters } = this.state;\n    // const index = counters.indexOf(counter);\n    // this.setState({\n    //   counters: [\n    //     ...counters.slice(0, index),\n    //     {\n    //       ...counter,\n    //       value: counter.value + value,\n    //     },\n    //     ...counters.slice(index + 1),\n    //   ],\n    // });\n\n    // C2\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value = counter.value + value;\n    this.setState({\n      counters,\n    });\n  }\n\n  removeValue(counter) {\n    // C1\n    // const { counters } = this.state;\n    // const index = counters.indexOf(counter);\n    // this.setState({\n    //   counters: [\n    //     ...counters.slice(0, index),\n    //     {\n    //       ...counter,\n    //       value: 0,\n    //     },\n    //     ...counters.slice(index + 1),\n    //   ],\n    // });\n    // C2\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value = 0;\n    this.setState({ counters });\n  }\n  reset() {\n    const { counters } = this.state;\n    const newData = counters.map((c) => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters: newData });\n  }\n\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     movies: getMovies(),\n  //     count: getMovies().length,\n  //   };\n  // }\n  // deleteMovie = (movieId) => {\n  //   const movies = this.state.movies.filter((movie) => movie._id !== movieId);\n  //   this.setState({\n  //     movies: movies,\n  //     count: this.state.count - 1,\n  //   });\n  // };\n  render() {\n    console.log(\"App - Render\");\n    // const { movies, count } = this.state;\n    // if (count === 0) return <span>There are no movies in the databases.</span>;\n    const { counters } = this.state;\n    return (\n      <React.Fragment>\n        <NavBar totalCounters={counters.filter((c) => c.value > 0).length} />\n        <main className=\"container\">\n          <Counters\n            counters={counters}\n            onReset={this.reset}\n            onIncreament={this.increment}\n            onRemoveValue={this.removeValue}\n            onDelete={this.handleDelete}\n          />\n        </main>\n\n        {/* <Counter /> */}\n        {/* <div className=\"container\">\n          <p>Showing {count} movies in the databases.</p>\n          <div className=\"row\">\n            <div className=\"col\">\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">Title</th>\n                    <th scope=\"col\">Genre</th>\n                    <th scope=\"col\">Stock</th>\n                    <th scope=\"col\">Rate</th>\n                    <th scope=\"col\">Action</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {movies.map((movie, index) => (\n                    <tr key={index}>\n                      <th scope=\"row\">{movie.title}</th>\n                      <td>{movie.genre.name}</td>\n                      <td>{movie.numberInStock}</td>\n                      <td>{movie.dailyRentalRate}</td>\n                      <td>\n                        <button\n                          className=\"btn btn-outline-danger\"\n                          onClick={() => this.deleteMovie(movie._id)}\n                        >\n                          Delete\n                        </button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div> */}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}